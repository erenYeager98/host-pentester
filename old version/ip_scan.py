import subprocess
import re

def get_cidr_notation():
    # Run ipconfig command
    ipconfig_result = subprocess.run(['ipconfig'], capture_output=True, text=True).stdout
    
    # Extract IP address and subnet mask
    ip_pattern = re.compile(r'IPv4 Address[^\d]*(\d+\.\d+\.\d+\.\d+)')
    mask_pattern = re.compile(r'Subnet Mask[^\d]*(\d+\.\d+\.\d+\.\d+)')

    ip_address = None
    netmask = None

    for line in ipconfig_result.split('\n'):
        if ip_pattern.search(line):
            ip_address = ip_pattern.search(line).group(1)
        if mask_pattern.search(line):
            netmask = mask_pattern.search(line).group(1)
    
    if not ip_address or not netmask:
        raise Exception("Could not find IP address or netmask")

    # Convert netmask to CIDR notation
    mask_octets = netmask.split('.')
    cidr = sum(bin(int(octet)).count('1') for octet in mask_octets)
    
    return f"{ip_address}/{cidr}"

def scan_subnet(cidr_notation):
    # Run nmap command to scan subnet
    nmap_result = subprocess.run(['nmap', '-sn', cidr_notation], capture_output=True, text=True).stdout
    return nmap_result

def extract_ip_addresses(nmap_result):
    # Extract IP addresses from nmap result
    ip_pattern = re.compile(r'Nmap scan report for (\d+\.\d+\.\d+\.\d+)')
    ip_addresses = ip_pattern.findall(nmap_result)
    return ip_addresses

def main():
    try:
        # Get CIDR notation
        cidr_notation = get_cidr_notation()
        
        # Scan subnet
        scan_result = scan_subnet(cidr_notation)
        
        # Extract IP addresses
        ip_addresses = extract_ip_addresses(scan_result)
        
        # Save IP addresses to log.txt
        with open('log.txt', 'w') as log_file:
            log_file.write("Available Hosts:\n")
            for ip in ip_addresses:
                log_file.write(f"{ip}\n")
        
        print("IP addresses of available hosts saved to log.txt")
    
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
